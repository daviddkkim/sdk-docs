import { createStitches } from "@stitches/react";
import {
  gray,
  mauve,
  slate,
  sage,
  olive,
  sand,
  tomato,
  red,
  crimson,
  pink,
  plum,
  purple,
  violet,
  indigo,
  blue,
  sky,
  mint,
  cyan,
  teal,
  green,
  grass,
  lime,
  yellow,
  amber,
  orange,
  brown,
  bronze,
  gold,
  grayA,
  mauveA,
  slateA,
  sageA,
  oliveA,
  sandA,
  tomatoA,
  redA,
  crimsonA,
  pinkA,
  plumA,
  purpleA,
  violetA,
  indigoA,
  blueA,
  skyA,
  mintA,
  cyanA,
  tealA,
  greenA,
  grassA,
  limeA,
  yellowA,
  amberA,
  orangeA,
  brownA,
  bronzeA,
  goldA,
  whiteA,
  blackA,
  grayDark,
  mauveDark,
  slateDark,
  sageDark,
  oliveDark,
  sandDark,
  tomatoDark,
  redDark,
  crimsonDark,
  pinkDark,
  plumDark,
  purpleDark,
  violetDark,
  indigoDark,
  blueDark,
  skyDark,
  mintDark,
  cyanDark,
  tealDark,
  greenDark,
  grassDark,
  limeDark,
  yellowDark,
  amberDark,
  orangeDark,
  brownDark,
  bronzeDark,
  goldDark,
  grayDarkA,
  mauveDarkA,
  slateDarkA,
  sageDarkA,
  oliveDarkA,
  sandDarkA,
  tomatoDarkA,
  redDarkA,
  crimsonDarkA,
  pinkDarkA,
  plumDarkA,
  purpleDarkA,
  violetDarkA,
  indigoDarkA,
  blueDarkA,
  skyDarkA,
  mintDarkA,
  cyanDarkA,
  tealDarkA,
  greenDarkA,
  grassDarkA,
  limeDarkA,
  yellowDarkA,
  amberDarkA,
  orangeDarkA,
  brownDarkA,
  bronzeDarkA,
  goldDarkA,
} from "@radix-ui/colors";
import type * as Stitches from "@stitches/react";
export type { VariantProps } from "@stitches/react";

export const {
  styled,
  css,
  theme,
  createTheme,
  getCssText,
  globalCss,
  keyframes,
  config,
  reset,
} = createStitches({
  theme: {
    colors: {
      "background-primary-neutral": mauve.mauve1,
      "background-primary-hover": mauve.mauve3,
      "background-secondary-neutral": mauve.mauve3,
      "background-secondary-hover": mauve.mauve5,
      "background-tertiary-neutral": mauve.mauve5,
      "background-tertiary-hover": mauve.mauve7,
      "background-accent-neutral": violet.violet12,
      "background-accent-hover": violet.violet11,
      "background-ghost-neutral": "transparent",
      "background-ghost-hover": mauve.mauve3,
      "background-mutedAccent": violet.violet3,
      "background-overlay": mauveA.mauveA8,
      "border-primary": mauve.mauve5,
      "border-accent": violet.violet12,
      "border-contrast": mauve.mauve10,
      "border-focus-base": purple.purple8,
      "border-focus-additive": purple.purple9,
      "shadow-default": mauveA.mauveA5,
      "shadow-secondary": mauveA.mauveA4,
      "text-primary": mauve.mauve12,
      "text-secondary": mauve.mauve11,
      "text-accent": violet.violet12,
      "text-accent-bright": violet.violet11,
      "text-contrast": mauve.mauve1,
      ...gray,
      ...mauve,
      ...purple,
      ...violet,
      ...indigo,
      ...sand,
      ...amber,
      ...orange,
      ...sage,
      ...grass,
      ...slate,
      ...gold,
      ...grayA,
      ...mauveA,
      ...purpleA,
      ...violetA,
      ...indigoA,
      ...whiteA,
      ...blackA,
      ...tomato
    },
    fonts: {
      untitled: "Untitled Sans, -apple-system, system-ui, sans-serif",
      mono: "SÃ¶hne Mono, menlo, monospace",
    },
    space: {
      1: "4px",
      2: "8px",
      3: "16px",
      4: "20px",
      5: "24px",
      6: "32px",
      7: "48px",
      8: "64px",
      9: "80px",
    },
    sizes: {
      1: "4px",
      2: "8px",
      3: "16px",
      4: "20px",
      5: "24px",
      6: "32px",
      7: "48px",
      8: "64px",
      9: "80px",
    },
    fontSizes: {
      1: "12px",
      2: "13px",
      3: "15px",
      4: "17px",
      5: "19px",
      6: "21px",
      7: "27px",
      8: "35px",
      9: "59px",
    },
    radii: {
      1: "4px",
      2: "6px",
      3: "8px",
      4: "12px",
      round: "50%",
      pill: "9999px",
    },
    zIndices: {
      1: "100",
      2: "200",
      3: "300",
      4: "400",
      max: "999",
    },
  },
  media: {
    phone: `(width < 720px)`,
    tablet: `(720px <= width < 1200px)`,
    desktop: `(1200px <= width)`,
  },
  utils: {
    p: (value: Stitches.PropertyValue<"padding">) => ({
      padding: value,
    }),
    pt: (value: Stitches.PropertyValue<"paddingTop">) => ({
      paddingTop: value,
    }),
    pr: (value: Stitches.PropertyValue<"paddingRight">) => ({
      paddingRight: value,
    }),
    pb: (value: Stitches.PropertyValue<"paddingBottom">) => ({
      paddingBottom: value,
    }),
    pl: (value: Stitches.PropertyValue<"paddingLeft">) => ({
      paddingLeft: value,
    }),
    px: (value: Stitches.PropertyValue<"paddingLeft">) => ({
      paddingLeft: value,
      paddingRight: value,
    }),
    py: (value: Stitches.PropertyValue<"paddingTop">) => ({
      paddingTop: value,
      paddingBottom: value,
    }),

    m: (value: Stitches.PropertyValue<"margin">) => ({
      margin: value,
    }),
    mt: (value: Stitches.PropertyValue<"marginTop">) => ({
      marginTop: value,
    }),
    mr: (value: Stitches.PropertyValue<"marginRight">) => ({
      marginRight: value,
    }),
    mb: (value: Stitches.PropertyValue<"marginBottom">) => ({
      marginBottom: value,
    }),
    ml: (value: Stitches.PropertyValue<"marginLeft">) => ({
      marginLeft: value,
    }),
    mx: (value: Stitches.PropertyValue<"marginLeft">) => ({
      marginLeft: value,
      marginRight: value,
    }),
    my: (value: Stitches.PropertyValue<"marginTop">) => ({
      marginTop: value,
      marginBottom: value,
    }),

    ta: (value: Stitches.PropertyValue<"textAlign">) => ({ textAlign: value }),

    fd: (value: Stitches.PropertyValue<"flexDirection">) => ({
      flexDirection: value,
    }),
    fw: (value: Stitches.PropertyValue<"flexWrap">) => ({ flexWrap: value }),

    ai: (value: Stitches.PropertyValue<"alignItems">) => ({
      alignItems: value,
    }),
    ac: (value: Stitches.PropertyValue<"alignContent">) => ({
      alignContent: value,
    }),
    jc: (value: Stitches.PropertyValue<"justifyContent">) => ({
      justifyContent: value,
    }),
    as: (value: Stitches.PropertyValue<"alignSelf">) => ({ alignSelf: value }),
    fg: (value: Stitches.PropertyValue<"flexGrow">) => ({ flexGrow: value }),
    fs: (value: Stitches.PropertyValue<"flexShrink">) => ({
      flexShrink: value,
    }),
    fb: (value: Stitches.PropertyValue<"flexBasis">) => ({ flexBasis: value }),

    bc: (value: Stitches.PropertyValue<"backgroundColor">) => ({
      backgroundColor: value,
    }),

    br: (value: Stitches.PropertyValue<"borderRadius">) => ({
      borderRadius: value,
    }),
    btrr: (value: Stitches.PropertyValue<"borderTopRightRadius">) => ({
      borderTopRightRadius: value,
    }),
    bbrr: (value: Stitches.PropertyValue<"borderBottomRightRadius">) => ({
      borderBottomRightRadius: value,
    }),
    bblr: (value: Stitches.PropertyValue<"borderBottomLeftRadius">) => ({
      borderBottomLeftRadius: value,
    }),
    btlr: (value: Stitches.PropertyValue<"borderTopLeftRadius">) => ({
      borderTopLeftRadius: value,
    }),

    bs: (value: Stitches.PropertyValue<"boxShadow">) => ({ boxShadow: value }),

    lh: (value: Stitches.PropertyValue<"lineHeight">) => ({
      lineHeight: value,
    }),

    ox: (value: Stitches.PropertyValue<"overflowX">) => ({ overflowX: value }),
    oy: (value: Stitches.PropertyValue<"overflowY">) => ({ overflowY: value }),

    pe: (value: Stitches.PropertyValue<"pointerEvents">) => ({
      pointerEvents: value,
    }),
    us: (value: Stitches.PropertyValue<"userSelect">) => ({
      WebkitUserSelect: value,
      userSelect: value,
    }),

    userSelect: (value: Stitches.PropertyValue<"userSelect">) => ({
      WebkitUserSelect: value,
      userSelect: value,
    }),

    size: (value: Stitches.PropertyValue<"width">) => ({
      width: value,
      height: value,
    }),

    appearance: (value: Stitches.PropertyValue<"appearance">) => ({
      WebkitAppearance: value,
      appearance: value,
    }),
    backgroundClip: (value: Stitches.PropertyValue<"backgroundClip">) => ({
      WebkitBackgroundClip: value,
      backgroundClip: value,
    }),
  },
});

export type CSS = Stitches.CSS<typeof config>;

export const darkTheme = createTheme("dark-theme", {
  colors: {
    ...mauveDark,
    ...purpleDark,
    ...violetDark,
    ...indigoDark,

    ...grayDarkA,
    ...mauveDarkA,
    ...purpleDarkA,
    ...violetDarkA,
    ...indigoDarkA,

    "background-primary-neutral": mauveDark.mauve1,
    "background-primary-hover": mauveDark.mauve3,
    "background-secondary-neutral": mauveDark.mauve3,
    "background-secondary-hover": mauveDark.mauve5,
    "background-tertiary-neutral": mauveDark.mauve5,
    "background-tertiary-hover": mauveDark.mauve7,
    "background-accent-neutral": violetDark.violet12,
    "background-accent-hover": violetDark.violet11,
    "background-ghost-neutral": "transparent",
    "background-ghost-hover": mauveDark.mauve3,
    "background-mutedAccent": violetDark.violet3,
    "background-overlay": mauveDarkA.mauveA8,
    "border-primary": mauveDark.mauve5,
    "border-accent": violetDark.violet12,
    "border-contrast": mauveDark.mauve10,
    "border-focus-base": indigoDark.indigo8,
    "border-focus-additive": indigoDark.indigo9,
    "shadow-default": mauveDarkA.mauveA5,
    "shadow-secondary": mauveDarkA.mauveA4,
    "text-primary": mauveDark.mauve12,
    "text-secondary": mauveDark.mauve11,
    "text-accent": violetDark.violet12,
    "text-accent-bright": violetDark.violet11,
    "text-contrast": mauveDark.mauve1,

    // Semantic colors
    hiContrast: "$slate12",
    loContrast: "$slate1",
    canvas: "hsl(0 0% 15%)",
    panel: "$slate3",
    transparentPanel: "hsl(0 100% 100% / 97%)",
    shadowLight: "hsl(206 22% 7% / 35%)",
    shadowDark: "hsl(206 22% 7% / 20%)",
    overlay: "hsla(0,0%,0%,0.8)",
    commandModalBackground: "rgba(22,22,22,0.3)",
  },
});

export const orangeTheme = createTheme("orange-theme", {
  colors: {
    ...sand,
    ...orange,
    ...amber,
    ...indigoDark,
    ...mint,
    ...mauve,
    ...purple,
    ...violet,
    ...indigo,
    ...sage,
    ...grass,
    ...slate,
    ...gold,
    ...sandA,
    ...orangeA,
    ...amberA,
    ...violetDarkA,
    ...indigoDarkA,

    "background-primary-neutral": sand.sand1,
    "background-primary-hover": sand.sand3,
    "background-secondary-neutral": sand.sand3,
    "background-secondary-hover": sand.sand5,
    "background-tertiary-neutral": sand.sand5,
    "background-tertiary-hover": sand.sand7,
    "background-accent-neutral": orange.orange12,
    "background-accent-hover": orange.orange11,
    "background-mutedAccent": orange.orange3,
    "background-ghost-neutral": "transparent",
    "background-ghost-hover": sand.sand3,
    "background-overlay": sandA.sandA8,
    "border-primary": sand.sand5,
    "border-accent": orange.orange12,
    "border-contrast": sand.sand10,
    "border-focus-base": amber.amber8,
    "border-focus-additive": amber.amber9,
    "shadow-default": sandA.sandA5,
    "shadow-secondary": sandA.sandA4,
    "text-primary": sand.sand12,
    "text-secondary": sand.sand11,
    "text-accent": orange.orange12,
    "text-accent-bright": orange.orange11,
    "text-contrast": sand.sand1,

    // Semantic colors
    hiContrast: "$slate12",
    loContrast: "$slate1",
    canvas: "hsl(0 0% 15%)",
    panel: "$slate3",
    transparentPanel: "hsl(0 100% 100% / 97%)",
    shadowLight: "hsl(206 22% 7% / 35%)",
    shadowDark: "hsl(206 22% 7% / 20%)",
    overlay: "hsla(0,0%,0%,0.8)",
    commandModalBackground: "rgba(22,22,22,0.3)",
  },
});

export const grassTheme = createTheme("grass-theme", {
  colors: {
    ...sand,
    ...orange,
    ...amber,
    ...indigoDark,
    ...mint,
    ...mauve,
    ...purple,
    ...violet,
    ...indigo,
    ...sage,
    ...grass,
    ...slate,
    ...gold,
    ...sandA,
    ...orangeA,
    ...amberA,
    ...violetDarkA,
    ...indigoDarkA,

    "background-primary-neutral": sage.sage1,
    "background-primary-hover": sage.sage3,
    "background-secondary-neutral": sage.sage3,
    "background-secondary-hover": sage.sage5,
    "background-tertiary-neutral": sage.sage5,
    "background-tertiary-hover": sage.sage7,
    "background-accent-neutral": grass.grass12,
    "background-accent-hover": grass.grass11,
    "background-ghost-neutral": "transparent",
    "background-ghost-hover": sage.sage3,
    "background-mutedAccent": grass.grass3,
    "background-overlay": sageA.sageA8,
    "border-primary": sage.sage5,
    "border-accent": grass.grass12,
    "border-contrast": sage.sage10,
    "border-focus-base": mint.mint8,
    "border-focus-additive": mint.mint9,
    "shadow-default": sageA.sageA5,
    "shadow-secondary": sageA.sageA4,
    "text-primary": sage.sage12,
    "text-secondary": sage.sage11,
    "text-accent": grass.grass12,
    "text-accent-bright": grass.grass11,
    "text-contrast": sage.sage1,

    // Semantic colors
    hiContrast: "$slate12",
    loContrast: "$slate1",
    canvas: "hsl(0 0% 15%)",
    panel: "$slate3",
    transparentPanel: "hsl(0 100% 100% / 97%)",
    shadowLight: "hsl(206 22% 7% / 35%)",
    shadowDark: "hsl(206 22% 7% / 20%)",
    overlay: "hsla(0,0%,0%,0.8)",
    commandModalBackground: "rgba(22,22,22,0.3)",
  },
});

export const indigoTheme = createTheme("indigo-theme", {
  colors: {
    ...sand,
    ...orange,
    ...amber,
    ...indigoDark,
    ...mint,
    ...mauve,
    ...purple,
    ...violet,
    ...indigo,
    ...sage,
    ...grass,
    ...slate,
    ...gold,
    ...sandA,
    ...orangeA,
    ...amberA,
    ...violetDarkA,
    ...indigoDarkA,

    "background-primary-neutral": slate.slate1,
    "background-primary-hover": slate.slate3,
    "background-secondary-neutral": slate.slate3,
    "background-secondary-hover": slate.slate5,
    "background-tertiary-neutral": slate.slate5,
    "background-tertiary-hover": slate.slate7,
    "background-accent-neutral": indigo.indigo12,
    "background-accent-hover": indigo.indigo11,
    "background-ghost-neutral": "transparent",
    "background-ghost-hover": slate.slate3,
    "background-mutedAccent": indigo.indigo3,
    "background-overlay": slateA.slateA8,
    "border-primary": slate.slate5,
    "border-accent": indigo.indigo12,
    "border-contrast": slate.slate10,
    "border-focus-base": sky.sky8,
    "border-focus-additive": sky.sky9,
    "shadow-default": slateA.slateA5,
    "shadow-secondary": slateA.slateA4,
    "text-primary": slate.slate12,
    "text-secondary": slate.slate11,
    "text-accent": indigo.indigo12,
    "text-accent-bright": indigo.indigo11,
    "text-contrast": slate.slate1,

    // Semantic colors
    hiContrast: "$slate12",
    loContrast: "$slate1",
    canvas: "hsl(0 0% 15%)",
    panel: "$slate3",
    transparentPanel: "hsl(0 100% 100% / 97%)",
    shadowLight: "hsl(206 22% 7% / 35%)",
    shadowDark: "hsl(206 22% 7% / 20%)",
    overlay: "hsla(0,0%,0%,0.8)",
    commandModalBackground: "rgba(22,22,22,0.3)",
  },
});

export const goldTheme = createTheme("gold-theme", {
  colors: {
    ...sand,
    ...orange,
    ...amber,
    ...indigoDark,
    ...mint,
    ...mauve,
    ...purple,
    ...violet,
    ...yellow,
    ...indigo,
    ...sage,
    ...grass,
    ...slate,
    ...gold,
    ...sandA,
    ...orangeA,
    ...amberA,
    ...violetDarkA,
    ...indigoDarkA,

    "background-primary-neutral": sand.sand1,
    "background-primary-hover": sand.sand3,
    "background-secondary-neutral": sand.sand3,
    "background-secondary-hover": sand.sand5,
    "background-tertiary-neutral": sand.sand5,
    "background-tertiary-hover": sand.sand7,
    "background-accent-neutral": gold.gold12,
    "background-accent-hover": gold.gold11,
    "background-ghost-neutral": "transparent",
    "background-ghost-hover": sand.sand3,
    "background-mutedAccent": gold.gold3,
    "background-overlay": sandA.sandA8,
    "border-primary": sand.sand5,
    "border-accent": gold.gold12,
    "border-contrast": gold.gold10,
    "border-focus-base": yellow.yellow8,
    "border-focus-additive": yellow.yellow9,
    "shadow-default": sandA.sandA5,
    "shadow-secondary": sandA.sandA4,
    "text-primary": sand.sand12,
    "text-secondary": sand.sand11,
    "text-accent": gold.gold12,
    "text-accent-bright": gold.gold11,
    "text-contrast": sand.sand1,

    // Semantic colors
    hiContrast: "$slate12",
    loContrast: "$slate1",
    canvas: "hsl(0 0% 15%)",
    panel: "$slate3",
    transparentPanel: "hsl(0 100% 100% / 97%)",
    shadowLight: "hsl(206 22% 7% / 35%)",
    shadowDark: "hsl(206 22% 7% / 20%)",
    overlay: "hsla(0,0%,0%,0.8)",
    commandModalBackground: "rgba(22,22,22,0.3)",
  },
});